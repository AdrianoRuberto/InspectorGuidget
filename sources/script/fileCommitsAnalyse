#! /bin/bash

if [ "$#" -ne 4 ]
then
	echo "The following arguments must be provided:"
	echo -e "\t1. The name of the file to analyse;"
	echo -e "\t2. The log file;"
	echo -e "\t3. The start line of the listener to analyse;"
	echo -e "\t4. The end line of the listener to analyse."
	exit
fi

declare -r GIT_REPO_PATH=`git rev-parse --show-toplevel`
declare -r REPO_NAME=`basename $GIT_REPO_PATH`
declare -i startLine=$3
declare -i endLine=$4
declare -r LOG_FILE=$2
declare -r FILE_NAME=$1
declare -r LINES_OF_CTX=0
declare -r DEBUG=0
declare -r NAME_LISTENER=`basename $FILE_NAME ".java"`$startLine"to"$endLine

blame=`git --no-pager blame -l -L $startLine,$endLine $FILE_NAME | sed -e "s/^\([a-zA-Z0-9]*\) .*/\1/g" | sort | uniq | tr '\n' ';'`

if [ -z $blame ]; then exit; fi

printf $REPO_NAME";"$FILE_NAME";"$NAME_LISTENER";" >> $LOG_FILE

end=0

while read rev ; do
		commitConcerned=0
		nbLinesToRemoveStart=0
		nbLinesToRemoveEnd=0

		while read chunkHeader ; do

			if [ "$DEBUG" -eq "1" ] ; then 
				echo $rev", startLine:"$startLine" endLine:"$endLine
				echo $chunkHeader
#				git --no-pager show --unified=$LINES_OF_CTX $rev
			fi

			if [[ "$chunkHeader" =~ ^@@@.* ]] ; then
				startCurrentFile=`echo $chunkHeader | sed -e "s/^@@@ -[0-9]*\(,[0-9]*\)\? -[0-9]*\(,[0-9]*\)\? +\([0-9]*\).*@@@.*$/\3/g"`
				startCurrentFile=$((startCurrentFile+LINES_OF_CTX))
				endCurrentFile=`echo $chunkHeader | sed -e "s/^@@@ -[0-9]*\(,[0-9]*\)\? -[0-9]*\(,[0-9]*\)\? +[0-9]*,\([0-9]*\) @@@.*$/\3/g"`
				if [[ "$endCurrentFile" =~ ^@.* ]]; then endCurrentFile=1 ; fi

				startPrevFile=`echo $chunkHeader | sed -e "s/^@@@ -\([0-9]*\).*@@@.*$/\1/g"`
				startPrevFile=$((startPrevFile+LINES_OF_CTX))
				endPrevFile=`echo $chunkHeader | sed -e "s/^@@@ -[0-9]*,\([0-9]*\) +.*@@@.*$/\1/g"`
				if [[ "$endPrevFile" =~ ^@.* ]]; then endPrevFile=1 ; fi

				endPrevFile2=`echo $chunkHeader | sed -e "s/^@@@ -[0-9]*\(,[0-9]*\)\? -[0-9]*,\([0-9]*\) +.*@@@.*$/\2/g"`
				if [[ "$endPrevFile2" =~ ^@.* ]]; then endPrevFile2=1 ; fi

				nbLines=$((endCurrentFile*2-endPrevFile-endPrevFile2))
			else

				startCurrentFile=`echo $chunkHeader | sed -e "s/^@@ -[0-9]*\(,[0-9]*\)\? +\([0-9]*\).*@@.*$/\2/g"`
				startCurrentFile=$((startCurrentFile+LINES_OF_CTX))
				endCurrentFile=`echo $chunkHeader | sed -e "s/^@@ -[0-9]*\(,[0-9]*\)\? +[0-9]*,\([0-9]*\) @@.*$/\2/g"`
				if [[ "$endCurrentFile" =~ ^@.* ]]; then endCurrentFile=1 ; fi

				startPrevFile=`echo $chunkHeader | sed -e "s/^@@ -\([0-9]*\).*@@.*$/\1/g"`
				startPrevFile=$((startPrevFile+LINES_OF_CTX))
				endPrevFile=`echo $chunkHeader | sed -e "s/^@@ -[0-9]*,\([0-9]*\) +.*@@.*$/\1/g"`
				if [[ "$endPrevFile" =~ ^@.* ]]; then endPrevFile=1 ; fi

				nbLines=$((endCurrentFile-endPrevFile))
			fi

			endCurrentFile=$((startCurrentFile+endCurrentFile-2*LINES_OF_CTX-1))
			endPrevFile=$((startPrevFile+endPrevFile-2*LINES_OF_CTX-1))

			if [ "$DEBUG" -eq "1" ] ; then 
				echo $chunkHeader" startCurr:"$startCurrentFile" endCurr:"$endCurrentFile" startPrev:"$startPrevFile" endPrev:"$endPrevFile" addedLines:"$nbLines
			fi

			if [ $endCurrentFile -lt $startLine ]
			then
				nbLinesToRemoveStart=$((nbLinesToRemoveStart+nbLines))
				nbLinesToRemoveEnd=$((nbLinesToRemoveEnd+nbLines))
			else
				if [ $endCurrentFile -le $endLine ]
				then
					commitConcerned=1
					if [ $startCurrentFile -ge $startLine ]
					then
						nbLinesToRemoveEnd=$((nbLinesToRemoveEnd+nbLines))
					else
#if [ $commitConcerned -eq 1 ]
#then
#	blame+=";"$rev
#fi
#blame=`echo "$blame" | tr ';' '\n' | sort | uniq | tr '\n' ';'`
#printf "$blame""\n" >> $LOG_FILE
#exit;

						if [[ "$startPrevFile" -lt 1 && "$endPrevFile" -lt 1 ]] || [[ "$startPrevFile" -eq "$startCurrentFile" && "$endPrevFile" -eq "$endCurrentFile" ]] ; then end=1;
						else 
							while true; do
							gitk --unified=$LINES_OF_CTX $rev -1 $FILE_NAME &
							read -p "Look at the header: $chunkHeader. If the listener is in the code above (if not, type N), is it the commit that introduced the listener (type F)? Or how many lines added/removed (the total, negative value when removed) BEFORE the beginning of the listener?" res1 </dev/tty
								case $res1 in
									F ) end=1; break;;
									N ) end=1; break;;
									[[:digit:]]|-[[:digit:]] ) nbLinesToRemoveStart=res1; break;;
									* ) echo "Please answer N or an integer value";;
								esac
							done

							if [ $end -eq "0" ]; then
								while true; do
								read -p "And how many lines added/removed (negative value when removed) IN the listener?" res2 </dev/tty
									case $res2 in
										[[:digit:]]|-[[:digit:]] ) nbLinesToRemoveEnd=$((res1+res2)); break;;
										* ) echo "Please an integer value";;
									esac
								done
							fi
						fi
					fi
				else
					if [ $startCurrentFile -le $endLine ]
					then
#if [ $commitConcerned -eq 1 ]
#then
#	blame+=";"$rev
#fi
#blame=`echo "$blame" | tr ';' '\n' | sort | uniq | tr '\n' ';'`
#printf "$blame""\n" >> $LOG_FILE
#exit;

						if [[ "$startPrevFile" -lt 1 && "$endPrevFile" -lt 1 ]] || [[ "$startPrevFile" -eq "$startCurrentFile" && "$endPrevFile" -eq "$endCurrentFile" ]] ; then end=1;
						else 
							while true; do
							gitk --unified=$LINES_OF_CTX $rev -1 $FILE_NAME &
							read -p "Look at the header: $chunkHeader. If the listener is in the code above (if not, type N), is it the commit that introduced the listener (type F)? Or how many lines added/removed (the total, negative value when removed) IN the listener (in fact before the ending bracket of the listener)? " res </dev/tty
								case $res in
									N ) end=1; break;;
									F ) end=1; break;;
									[[:digit:]]|-[[:digit:]] ) nbLinesToRemoveEnd=$((-res)); break;;
									* ) echo "Please answer N or an integer value";;
								esac
							done
						fi
					fi
				fi
			fi
			if [ "$DEBUG" -eq "1" ] ; then echo "END REV"; fi
			if [ $end -eq "1" ]; then break; fi
		done < <(git --no-pager log --unified=$LINES_OF_CTX -p $rev -1 $FILE_NAME | grep -o '^@@.*')

	startLine=$((startLine-nbLinesToRemoveStart))
	endLine=$((endLine-nbLinesToRemoveEnd))

	if [ $commitConcerned -eq 1 ]
	then
		blame+=";"$rev
	fi

	if [ $end -eq "1" ]; then break; fi

done < <(git rev-list HEAD -- $FILE_NAME)

#printf `echo -e "$blame" | sort | uniq | tr '\n' ';'`"\n"
blame=`echo "$blame" | tr ';' '\n' | sort | uniq | tr '\n' ';'`
printf "$blame""\n" >> $LOG_FILE

